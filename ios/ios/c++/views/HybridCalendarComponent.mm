///
/// HybridCalendarComponent.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import "HybridCalendarComponent.hpp"
#import <memory>
#import <react/renderer/componentregistry/ComponentDescriptorProvider.h>
#import <React/RCTViewComponentView.h>
#import <React/RCTComponentViewFactory.h>
#import <React/UIView+ComponentViewProtocol.h>
#import <NitroModules/NitroDefines.hpp>
#import <UIKit/UIKit.h>

#import "HybridCalendarSpecSwift.hpp"
#import "NitroCalendar-Swift-Cxx-Umbrella.hpp"

using namespace facebook;
using namespace margelo::nitro::calendar;
using namespace margelo::nitro::calendar::views;

/**
 * Represents the React Native View holder for the Nitro "Calendar" HybridView.
 */
@interface HybridCalendarComponent: RCTViewComponentView
@end

@implementation HybridCalendarComponent {
  std::shared_ptr<HybridCalendarSpecSwift> _hybridView;
}

+ (void) load {
  [super load];
  [RCTComponentViewFactory.currentComponentViewFactory registerComponentViewClass:[HybridCalendarComponent class]];
}

+ (react::ComponentDescriptorProvider) componentDescriptorProvider {
  return react::concreteComponentDescriptorProvider<HybridCalendarComponentDescriptor>();
}

- (instancetype) init {
  if (self = [super init]) {
    std::shared_ptr<HybridCalendarSpec> hybridView = NitroCalendar::NitroCalendarAutolinking::createCalendar();
    _hybridView = std::dynamic_pointer_cast<HybridCalendarSpecSwift>(hybridView);
    [self updateView];
  }
  return self;
}

- (void) updateView {
  // 1. Get Swift part
  NitroCalendar::HybridCalendarSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Get UIView*
  void* viewUnsafe = swiftPart.getView();
  UIView* view = (__bridge_transfer UIView*) viewUnsafe;

  // 3. Update RCTViewComponentView's [contentView]
  [self setContentView:view];
}

- (void) updateProps:(const react::Props::Shared&)props
            oldProps:(const react::Props::Shared&)oldProps {
  // 1. Downcast props
  const auto& newViewPropsConst = *std::static_pointer_cast<HybridCalendarProps const>(props);
  auto& newViewProps = const_cast<HybridCalendarProps&>(newViewPropsConst);
  NitroCalendar::HybridCalendarSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Update each prop individually
  swiftPart.beforeUpdate();

  // colorScheme: enum
  if (newViewProps.colorScheme.isDirty) {
    swiftPart.setColorScheme(static_cast<int>(newViewProps.colorScheme.value));
    newViewProps.colorScheme.isDirty = false;
  }
  // isBlue: boolean
  if (newViewProps.isBlue.isDirty) {
    swiftPart.setIsBlue(newViewProps.isBlue.value);
    newViewProps.isBlue.isDirty = false;
  }
  // someCallback: function
  if (newViewProps.someCallback.isDirty) {
    swiftPart.setSomeCallback(newViewProps.someCallback.value);
    newViewProps.someCallback.isDirty = false;
  }

  swiftPart.afterUpdate();

  // 3. Update hybridRef if it changed
  if (newViewProps.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = newViewProps.hybridRef.value;
    if (maybeFunc.has_value()) {
      maybeFunc.value()(_hybridView);
    }
    newViewProps.hybridRef.isDirty = false;
  }

  // 4. Continue in base class
  [super updateProps:props oldProps:oldProps];
}

@end
